[{"path":[]},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://waldo.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://waldo.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 waldo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://waldo.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://waldo.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2024). waldo: Find Differences R Objects. R package version 0.5.2.9000, https://github.com/r-lib/waldo, https://waldo.r-lib.org.","code":"@Manual{,   title = {waldo: Find Differences Between R Objects},   author = {Hadley Wickham},   year = {2024},   note = {R package version 0.5.2.9000, https://github.com/r-lib/waldo},   url = {https://waldo.r-lib.org}, }"},{"path":"https://waldo.r-lib.org/dev/index.html","id":"waldo","dir":"","previous_headings":"","what":"Find Differences Between R Objects","title":"Find Differences Between R Objects","text":"goal waldo find concisely describe difference pair R objects, primary goal making easier figure ’s gone wrong unit tests. waldo::compare() inspired .equal(), takes additional care generate actionable insights : Ordering differences important least important. Displaying values atomic vectors actually different. Carefully using colour emphasise changes (still readable colour isn’t available). Using R code (text description) show differences arise. possible, comparing elements name, rather position. Erring side producing much output, rather little.","code":""},{"path":"https://waldo.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find Differences Between R Objects","text":"can install released version waldo CRAN :","code":"install.packages(\"waldo\")"},{"path":"https://waldo.r-lib.org/dev/index.html","id":"comparisons","dir":"","previous_headings":"","what":"Comparisons","title":"Find Differences Between R Objects","text":"comparing atomic vectors, compare() produces diffs (thanks diffobj) highlight additions, deletions, changes, along little context: Deletion  Addition  Change  Long vectors short differences show local context around changes, everything ’s .  Depending relative size differences width console ’ll get one three displays: default display show vectors one atop :  ’s enough room , two vectors shown side--side:  ’s still enough room side--side, element given line:  comparing complex objects, waldo creates executable code path telling differences lie: Unnamed lists compared position:  Named lists, including data frames, compared name. example, note following comparison reports difference class names, values columns.  Recursion can arbitrarily deep:","code":"library(waldo) compare(c(\"a\", \"b\", \"c\"), c(\"a\", \"b\")) compare(c(\"a\", \"b\"), c(\"a\", \"b\", \"c\")) compare(c(\"a\", \"b\", \"c\"), c(\"a\", \"B\", \"c\")) compare(c(\"X\", letters), c(letters, \"X\")) compare(letters[1:5], letters[1:6]) options(width = 20) compare(letters[1:5], letters[1:6]) options(width = 10) compare(letters[1:5], letters[1:6]) compare(list(factor(\"x\")), list(1L)) df1 <- data.frame(x = 1:3, y = 3:1) df2 <- tibble::tibble(rev(df1)) compare(df1, df2) x <- list(a = list(b = list(c = list(structure(1, e = 1))))) y <- list(a = list(b = list(c = list(structure(1, e = \"a\"))))) compare(x, y)"},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two objects — compare","title":"Compare two objects — compare","text":"compares two R objects, identifying key differences. : Orders differences important least important. Displays values atomic vectors actually different. Carefully uses colour emphasise changes (still readable colour available). Uses R code (text description) show differences arise. possible, compares elements name, rather position. Errs side producing much output, rather little. compare() alternative .equal().","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two objects — compare","text":"","code":"compare(   x,   y,   ...,   x_arg = \"old\",   y_arg = \"new\",   tolerance = NULL,   max_diffs = if (in_ci()) Inf else 10,   ignore_srcref = TRUE,   ignore_attr = \"waldo_opts\",   ignore_encoding = TRUE,   ignore_function_env = FALSE,   ignore_formula_env = FALSE,   list_as_map = FALSE,   quote_strings = TRUE )"},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two objects — compare","text":"x, y Objects compare. x treated reference object messages describe y different x. ... handful arguments supported warning backward comparability. include: .equal() arguments checkNames check.attributes testthat::compare() argument tol arguments ignored warning. x_arg, y_arg Name x y arguments, used generated paths internal components. default \"old\" \"new\" since natural supply previous value new value. tolerance non-NULL, used threshold ignoring small floating point difference comparing numeric vectors. Using non-NULL value cause integer double vectors compared based values, types, ignore difference NaN NA_real_. uses algorithm .equal(), .e., first generate x_diff y_diff subsetting x y look locations differences. check mean(abs(x_diff - y_diff)) / mean(abs(y_diff)) (just mean(abs(x_diff - y_diff)) y_diff small) less tolerance. max_diffs Control maximum number differences shown. default shows 10 differences run interactively differences run CI. Set max_diffs = Inf see differences. ignore_srcref Ignore differences function srcrefs? TRUE default since srcref change behaviour function, printed representation. ignore_attr Ignore differences specified attributes? Supply character vector ignore differences named attributes. default \"waldo_opts\" attribute listed ignore_attr changes reported; customize ignore_attr, probably want . backward compatibility .equal(), can also use TRUE, ignore differences attributes. generally recommended blunt tool ignore many important functional differences. ignore_encoding Ignore string encoding? TRUE default, R's default behaviour. Use FALSE specifically concerned encoding, just value string. ignore_function_env, ignore_formula_env Ignore environments functions formulas, respectively? provided primarily backward compatibility .equal() always ignores environments. list_as_map Compare lists mappings names values. Concretely, drops NULLs objects sorts named components. quote_strings strings surrounded quotes? FALSE, side--side line--line comparisons used, way distinguish NA \"NA\".","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two objects — compare","text":"character vector class \"waldo_compare\". differences length 0; otherwise element contains description single difference.","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":"controlling-comparisons","dir":"Reference","previous_headings":"","what":"Controlling comparisons","title":"Compare two objects — compare","text":"two ways object (rather person calling compare() expect_equal() control compared objects. First, object S3 class, can provide compare_proxy() method provides alternative representation object; particularly useful important data stored outside R, e.g. external pointer. Alternatively, can attach attribute called \"waldo_opts\" object. list compare options, using names possible values arguments function. option ignored default (ignore_attr) can set options object control. (want see attributes interactively, attach compare_proxy() method.) Options supplied way also affect children. means options applied following order, lowest highest precedence: Defaults compare(). waldo_opts parents x. waldo_opts parents y. waldo_opts x. waldo_opts y. User-specified arguments compare(). Use techniques care. accidentally cover important difference can create confusing situation x y behave differently compare() reports differences underlying objects.","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two objects — compare","text":"","code":"# Thanks to diffobj package comparison of atomic vectors shows differences # with a little context compare(letters, c(\"z\", letters[-26])) #> `old[1:3]`:     \"a\" \"b\" \"c\" #> `new[1:4]`: \"z\" \"a\" \"b\" \"c\" #>  #> `old[23:26]`: \"w\" \"x\" \"y\" \"z\" #> `new[24:26]`: \"w\" \"x\" \"y\"     compare(c(1, 2, 3), c(1, 3)) #> `old`: 1 2 3 #> `new`: 1   3 compare(c(1, 2, 3), c(1, 3, 4, 5)) #> `old`: 1 2 3   #> `new`: 1 3 4 5 compare(c(1, 2, 3), c(1, 2, 5)) #> `old`: 1 2 3 #> `new`: 1 2 5  # More complex objects are traversed, stopping only when the types are # different compare(   list(x = list(y = list(structure(1, z = 2)))),   list(x = list(y = list(structure(1, z = \"a\")))) ) #> `attr(old$x$y[[1]], 'z')` is a double vector (2) #> `attr(new$x$y[[1]], 'z')` is a character vector ('a')  # Where possible, recursive structures are compared by name compare(iris, rev(iris)) #>     names(old)     | names(new)         #> [1] \"Sepal.Length\" - \"Species\"      [1] #> [2] \"Sepal.Width\"  - \"Petal.Width\"  [2] #> [3] \"Petal.Length\" | \"Petal.Length\" [3] #> [4] \"Petal.Width\"  - \"Sepal.Width\"  [4] #> [5] \"Species\"      - \"Sepal.Length\" [5]  compare(list(x = \"x\", y = \"y\"), list(y = \"y\", x = \"x\")) #> `names(old)`: \"x\" \"y\" #> `names(new)`: \"y\" \"x\" # Otherwise they're compared by position compare(list(\"x\", \"y\"), list(\"x\", \"z\")) #> `old[[2]]`: \"y\" #> `new[[2]]`: \"z\" compare(list(x = \"x\", x = \"y\"), list(x = \"x\", y = \"z\")) #> `names(old)`: \"x\" \"x\" #> `names(new)`: \"x\" \"y\" #>  #> `old[[2]]`: \"y\" #> `new[[2]]`: \"z\""},{"path":"https://waldo.r-lib.org/dev/reference/compare_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Proxy for waldo comparison — compare_proxy","title":"Proxy for waldo comparison — compare_proxy","text":"Use generic override waldo's default comparison need override defaults (typically object stores data external pointer). waldo comes methods common cases: data.table: .internal.selfref index attributes set NULL. attributes used performance optimisation, affect data. xml2::xml_node: underlying XML data stored memory C, behind external pointer, best can convert object string. Classes RProtoBuf package: like XML objects, store data memory C++ expose string names R. Fortunately, well-understood string representations can use comparisons. See https://protobuf.dev/reference/cpp/api-docs/google.protobuf.text_format/","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proxy for waldo comparison — compare_proxy","text":"","code":"compare_proxy(x, path = \"x\")"},{"path":"https://waldo.r-lib.org/dev/reference/compare_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proxy for waldo comparison — compare_proxy","text":"x object. path Path","code":""},{"path":"https://waldo.r-lib.org/dev/reference/compare_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proxy for waldo comparison — compare_proxy","text":"list two components: object: modified object path: updated path showing modification applied","code":""},{"path":"https://waldo.r-lib.org/dev/reference/waldo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"waldo: Find Differences Between R Objects — waldo-package","title":"waldo: Find Differences Between R Objects — waldo-package","text":"Compare complex R objects reveal key differences. Designed particularly use testing packages able quickly isolate key differences makes understanding test failures much easier.","code":""},{"path":[]},{"path":"https://waldo.r-lib.org/dev/reference/waldo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"waldo: Find Differences Between R Objects — waldo-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":[]},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-052","dir":"Changelog","previous_headings":"","what":"waldo 0.5.2","title":"waldo 0.5.2","text":"CRAN release: 2023-11-02 Fixes upcoming R-devel changes.","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-051","dir":"Changelog","previous_headings":"","what":"waldo 0.5.1","title":"waldo 0.5.1","text":"CRAN release: 2023-05-08 Tolerance also taken account displaying differences (#173). NA_real_ NaN treated non-equal tolerance non-null. means testthat::expect_equal(NaN, NA_real_) pass testthat::expect_identical(NaN, NA_real_) fail (#174).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-050","dir":"Changelog","previous_headings":"","what":"waldo 0.5.0","title":"waldo 0.5.0","text":"CRAN release: 2023-05-01 can opt-quoting strings quote_strings = FALSE (#145). Improvements missing value handling: NA_character_ \"NA\" longer treated equal (#162). NA_real_ NaN longer treated equal (@sorhawell, #150). Leading trailing NAs longer omitted output lengths x y unequal (#109). balanced attribute used POSIXlt objects R 4.3 greater now ignored (#160). 3d (greater) numeric arrays longer cause error (#148). Support complex numbers improved (#146). ignore_attr = \"class\" now works types input (#143).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-040","dir":"Changelog","previous_headings":"","what":"waldo 0.4.0","title":"waldo 0.4.0","text":"CRAN release: 2022-03-16 Atomic S3 classes format methods now use methods displaying comparisons (#98). printed representation , fallback displaying underlying data. Rowwise data frame comparisons now much much faster (#116), respect max_diffs argument (@krlmlr, #110). Unnamed environments now compare value, reference (.e. two environments contain values, compare , even ’re different environments) (#127). Environments contain self-references handled correctly (#117). Differences pairs environments ever reported . unlikely event bare CHARSXP objects, waldo now handles (#121). S4 objects labelled class, superclasses (#125). compare_proxy() ignores \"index\" attribute data tables (@krlmlr, #107), works RProtoBuf objects (@MichaelChirico, #119) Infinite values can compared tolerance (@dmurdoch, #122).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-031","dir":"Changelog","previous_headings":"","what":"waldo 0.3.1","title":"waldo 0.3.1","text":"CRAN release: 2021-09-14 compare()ing data frames now works independently option(max.print) (#105). Fixed regression comparing vectors missing values (#102).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-030","dir":"Changelog","previous_headings":"","what":"waldo 0.3.0","title":"waldo 0.3.0","text":"CRAN release: 2021-08-23 compare() now considerably faster comparing complex objects don’t differences (thanks strategic use identical()) (#86). compare() gains two improvements low-level diffs: Structurally identical data frames (#78) numeric matrices (#76) gain row--row diff makes easier see exactly values differ. element--element diff automatically used ’s shorter “smart” diff. improves diff quality comparing two vectors aren’t really related (#68). compare() gains list_as_map argument thanks idea @dmurdoch. allows compare behaviour two lists used connect names values (.e. list operating map dictionary). removes NULLs sorts named components (#72). objects involved compare() (opposed caller compare()) gained much greater ability control comparison. Objects can now contain waldo_opts attribute, list names valid values arguments compare(), overrides default comparisons (@dmurdoch). compare_proxy() now called earlier (type comparison) making flexible (#65). compare_proxy() gains second argument, path, used report proxy changed object. makes easier see proxy used (#73). Proxies now exist comparing RProtoBuf objects, converting proto text format (#82, @michaelquinn32). Comparing list symbol list without element longer errors (@mgirlich, #79).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-025","dir":"Changelog","previous_headings":"","what":"waldo 0.2.5","title":"waldo 0.2.5","text":"CRAN release: 2021-03-08 platforms without UTF-8 support, strings differ encoding now correctly considered identical (#66).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-024","dir":"Changelog","previous_headings":"","what":"waldo 0.2.4","title":"waldo 0.2.4","text":"CRAN release: 2021-02-11 Additional arguments compare() generate informative warning (#58). Numbers use better algorithm picking number decimal places show (#63). ASTs identical deparsed strings now show exactly AST differs. Source references now comprehensively stripped using rlang::zap_srcrefs() S3 objects now show base type, longer fails types incompatible.","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-023","dir":"Changelog","previous_headings":"","what":"waldo 0.2.3","title":"waldo 0.2.3","text":"CRAN release: 2020-11-09 compare() gains new max_diffs argument allows control maximum number differences shown. Set max_diffs = Inf see differences (#49) Logical vectors fall back element--element comparison cases (#51). Long-form diff longer confuses additions deletions (#52, @krlmlr).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-022","dir":"Changelog","previous_headings":"","what":"waldo 0.2.2","title":"waldo 0.2.2","text":"CRAN release: 2020-10-15 Handle S4 objects attributes slots. Additions now coloured blue deletions yellow (instead opposite).","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-021","dir":"Changelog","previous_headings":"","what":"waldo 0.2.1","title":"waldo 0.2.1","text":"CRAN release: 2020-10-08 compare() now labels output old new, since ’s natural way use . compare() can selectively ignore attributes providing vector ignore_attr (#45). print() method gets n argument allow explicitly specifying number differences show (@mnazarov). Improvements comparison display: Zero length vectors compare robustly (#39) Line--line comparisons show modifications deletion addition, rather addition deletion (#44). Differences numeric vectors robust, particularly presence missing values (#43). number digits selected also slightly improved ’re likely get exactly number digits needed.","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-020","dir":"Changelog","previous_headings":"","what":"waldo 0.2.0","title":"waldo 0.2.0","text":"CRAN release: 2020-07-13 objects: class (#26) names (#31) ignored ignoring attributes. Numeric logical vectors: clearer display differences. Numbers right-aligned, show numbers differences. Character vectors: trailing newline longer ignored (#37). Lists: elements unnamed lists compared, just last! (#32) Lists: unclassed prior comparison (#21). Data frames: internal representation row names longer used; instead use result rownames() (#23). Environments: New ignore_formula_env ignore_function_env arguments ignore formula function environments compatibility .equal() (#24). Expression objects: can now compared (#29). Calls: srcrefs attributes ignored. compare_proxy() now exported can provide methods objects need special handling (particularly needed objects contain external pointers) (#22). Fixed partial argument name .list().","code":""},{"path":"https://waldo.r-lib.org/dev/news/index.html","id":"waldo-010","dir":"Changelog","previous_headings":"","what":"waldo 0.1.0","title":"waldo 0.1.0","text":"CRAN release: 2020-04-16 Added NEWS.md file track changes package.","code":""}]
